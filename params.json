{
  "name": "Optimushttp",
  "tagline": "Android library that simplifys networking in android via an async http client",
  "body": "#OptimusHTTP\r\n\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.nisrulz/optimushttp/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.nisrulz/optimushttp) [![API](https://img.shields.io/badge/API-9%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=9) [![Javadocs](https://www.javadoc.io/badge/com.github.nisrulz/optimushttp.svg?color=blue&label=Javadoc)](https://www.javadoc.io/doc/com.github.nisrulz/optimushttp)\r\n\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-OptimusHTTP-green.svg?style=true)](https://android-arsenal.com/details/1/3592)\r\n\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/nisrulz.svg?style=social)](https://twitter.com/nisrulz)\r\n\r\nSimplified android async HTTP client\r\n\r\n#Integration\r\n- OptimusHTTP is available in the MavenCentral, so getting it is as simple as adding it as a dependency\r\n```gradle\r\ncompile 'com.github.nisrulz:optimushttp:1.0.0'\r\n```\r\n\r\n#Usage\r\n+ Setup your SERVER url\r\n```java\r\n// Link obtained from : http://requestb.in/\r\nString SERVER = \"http://requestb.in/168uy1z1\";\r\n```\r\n\r\n+ Create an instance of the ***OptimusHTTP*** class\r\n```java\r\n OptimusHTTP client = new OptimusHTTP();\r\n```\r\n\r\n+ Next if in debug stage, enable logs\r\n```java\r\nclient.enableDebugging();\r\n```\r\n\r\n+ Define parameters to be sent with the request\r\n```java\r\nArrayMap<String, String> params = new ArrayMap<>();\r\nparams.put(\"email\", \"abc@abc.com\");\r\nparams.put(\"pass\", \"abc\");\r\n```\r\n\r\n+ Define configurations for the request\r\n + Type of Method : POST/GET\r\n\t + POST Request\r\n  ```java\r\n  client.setMethod(OptimusHTTP.METHOD_POST);\r\n  ```\r\n\t + GET Request\r\n  ```java\r\n  client.setMethod(OptimusHTTP.METHOD_GET);\r\n  ```\r\n   + Type of Mode : PARALLEL/SEQ\r\n\t + Parallel Request\r\n  ```java\r\n  client.setMode(OptimusHTTP.MODE_PARALLEL);\r\n  ```\r\n\t + Sequential Request\r\n  ```java\r\n  client.setMode(OptimusHTTP.MODE_SEQ);\r\n  ```\r\n\r\n+ To make a request create an object of **HttpReq** class.\r\n> The ***client.makeRequest()*** function returns reference to each ***HttpReq*** object created which you can save in an *ArrayList* and then later on call cancel function on them to *cancel* the requests\r\n\r\n\t```java\r\n\t\r\n\tArrayList<HttpReq> refHttpReqList = new ArrayList<>();\r\n\ttry {\r\n\t     // makeRequest() returns the reference of the request made\r\n\t     // which can be used later to call the cancelReq() if required\r\n\t     // if no request is made the makeRequest() returns null\r\n\t    HttpReq req = client.makeRequest(MainActivity.this, SERVER, params, responseListener);\r\n\t        if (req != null)\r\n\t            refHttpReqList.add(req);\r\n\t} catch (Exception e) {\r\n\t        e.printStackTrace();\r\n\t}\r\n\t```\r\n\r\n+ To cancel one requests\r\n```java\r\nclient.cancelReq(req);\r\n```\r\n\r\n+ To cancel all requests\r\n```java\r\nif (refHttpReqList.size() > 0) {\r\n    for (int i = 0; i < refHttpReqList.size(); i++)\r\n        client.cancelReq(refHttpReqList.get(i));\r\n    refHttpReqList.clear();\r\n}\r\n```\r\n\r\n+ Implement the Callback\r\n```java\r\n// Listener for the Response received from server\r\nprivate final OptimusHTTP.ResponseListener responseListener = new OptimusHTTP.ResponseListener() {\r\n        @Override\r\n        public void onSuccess(String msg) {\r\n            System.out.println(msg);\r\n        }\r\n\r\n        @Override\r\n        public void onFailure(String msg) {\r\n            System.out.println(msg);\r\n        }\r\n    };\r\n```\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright 2016 Nishant Srivastava\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}