{
  "name": "Optimushttp",
  "tagline": "Android library that simplifies networking in android via an async http client",
  "body": "### Specs\r\n[ ![Download](https://api.bintray.com/packages/nisrulz/maven/com.github.nisrulz%3Aoptimushttp/images/download.svg) ](https://bintray.com/nisrulz/maven/com.github.nisrulz%3Aoptimushttp/_latestVersion) [![API](https://img.shields.io/badge/API-9%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=9)\r\n\r\n### Featured in\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-OptimusHTTP-green.svg?style=true)](https://android-arsenal.com/details/1/3592) [![AndroidDev Digest](https://img.shields.io/badge/AndroidDev%20Digest-%23100-blue.svg)](https://www.androiddevdigest.com/digest-100/)\r\n\r\n### Show some :heart:\r\n[![GitHub stars](https://img.shields.io/github/stars/nisrulz/sensey.svg?style=social&label=Star)](https://github.com/nisrulz/sensey) [![GitHub forks](https://img.shields.io/github/forks/nisrulz/sensey.svg?style=social&label=Fork)](https://github.com/nisrulz/sensey/fork) [![GitHub watchers](https://img.shields.io/github/watchers/nisrulz/sensey.svg?style=social&label=Watch)](https://github.com/nisrulz/sensey) [![GitHub followers](https://img.shields.io/github/followers/nisrulz.svg?style=social&label=Follow)](https://github.com/nisrulz/sensey)\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/nisrulz.svg?style=social)](https://twitter.com/nisrulz) \r\n\r\nAndroid library that simplifies networking in android via an async http client\r\n\r\n# Including in your project\r\nOptimusHTTP is available in the Jcenter, so getting it as simple as adding it as a dependency\r\n```gradle\r\ncompile 'com.github.nisrulz:optimushttp:{latest version}'\r\n```\r\nwhere `{latest version}` corresponds to published version in [ ![Download](https://api.bintray.com/packages/nisrulz/maven/com.github.nisrulz%3Aoptimushttp/images/download.svg) ](https://bintray.com/nisrulz/maven/com.github.nisrulz%3Aoptimushttp/_latestVersion)\r\n\r\n\r\n#Usage\r\n+ Setup your SERVER url\r\n```java\r\nString SERVER = \"http://uinames.com/api/\";\r\n```\r\n\r\n+ Create an instance of the ***OptimusHTTP*** class\r\n```java\r\n OptimusHTTP client = new OptimusHTTP(context);\r\n```\r\n\r\n+ Next if in debug stage, enable logs\r\n```java\r\nclient.enableDebugging();\r\n```\r\n\r\n+ Define parameters to be sent with the request\r\n```java\r\nArrayMap<String, String> params = new ArrayMap<>();\r\nparams.put(\"email\", \"abc@abc.com\");\r\nparams.put(\"pass\", \"abc\");\r\n```\r\n\r\n+ Define configurations for the request\r\n + Type of Method : POST/GET\r\n     + POST Request\r\n    ```java\r\n    client.setMethod(OptimusHTTP.METHOD_POST);\r\n    ```\r\n     + GET Request\r\n    ```java\r\n    client.setMethod(OptimusHTTP.METHOD_GET);\r\n    ```\r\n     + PUT Request\r\n    ```java\r\n    client.setMethod(OptimusHTTP.METHOD_PUT);\r\n    ```\r\n     + DELETE Request\r\n    ```java\r\n    client.setMethod(OptimusHTTP.METHOD_DELETE);\r\n    ```\r\n  \r\n  + Type of Mode : PARALLEL/SEQ\r\n     + Parallel Request\r\n    ```java\r\n    client.setMode(OptimusHTTP.MODE_PARALLEL);\r\n    ```\r\n     + Sequential Request\r\n    ```java\r\n    client.setMode(OptimusHTTP.MODE_SEQ);\r\n    ```\r\n\r\n  + Setup timeout values (optional, default is 10s)\r\n      + Connect Timeout\r\n     ```java\r\n     client.setConnectTimeout(10 * 1000);\r\n     ```\r\n      + Read Timeout\r\n     ```java\r\n     client.setReadTimeout(10 * 1000);\r\n     ```\r\n\r\n  + Setup content type (optional, deafult is `CONTENT_TYPE_FORM_URL_ENCODED`)\r\n       ```java\r\n       client.setContentType(OptimusHTTP.CONTENT_TYPE_JSON);\r\n       ```\r\n\r\n      Available Types\r\n\r\n        + `OptimusHTTP.CONTENT_TYPE_FORM_URL_ENCODED`\r\n        + `OptimusHTTP.CONTENT_TYPE_JSON`\r\n        + `OptimusHTTP.CONTENT_TYPE_PDF`\r\n        + `OptimusHTTP.CONTENT_TYPE_HTML`\r\n        + `OptimusHTTP.CONTENT_TYPE_IMG_PNG`\r\n        + `OptimusHTTP.CONTENT_TYPE_TEXT`\r\n\r\n  + Setup Headers (optional)\r\n      ```java\r\n      ArrayMap<String, String> headerMap = new ArrayMap<>();\r\n      headerMap.put(\"Accept-Encoding\", \"gzip, deflate\");\r\n      headerMap.put(\"Accept-Language\", \"en-US\");\r\n      headerMap.put(\"Content-Language\", \"en-US\");\r\n      client.setHeaderMap(headerMap);\r\n      ```\r\n\r\n+ To make a request create an object of **HttpReq** class.\r\n> The ***client.makeRequest()*** function returns reference to each ***HttpReq*** object created which you can save in an *ArrayList* and then later on call cancel function on them to *cancel* the requests\r\n\r\n\t```java\r\n\t\r\n\tArrayList<HttpReq> refHttpReqList = new ArrayList<>();\r\n\ttry {\r\n\t     // makeRequest() returns the reference of the request made\r\n\t     // which can be used later to call the cancelReq() if required\r\n\t     // if no request is made the makeRequest() returns null\r\n\t    HttpReq req = client.makeRequest(SERVER, params, responseListener);\r\n\t        if (req != null)\r\n\t            refHttpReqList.add(req);\r\n\t} catch (Exception e) {\r\n\t        e.printStackTrace();\r\n\t}\r\n\t```\r\n\r\n+ To cancel one requests\r\n```java\r\nclient.cancelReq(req);\r\n```\r\n\r\n+ To cancel all requests\r\n```java\r\nif (refHttpReqList.size() > 0) {\r\n    for (int i = 0; i < refHttpReqList.size(); i++)\r\n        client.cancelReq(refHttpReqList.get(i));\r\n    refHttpReqList.clear();\r\n}\r\n```\r\n\r\n+ Implement the Callback\r\n```java\r\n// Listener for the Response received from server\r\nprivate final OptimusHTTP.ResponseListener responseListener = new OptimusHTTP.ResponseListener() {\r\n        @Override\r\n        public void onSuccess(String msg) {\r\n            System.out.println(msg);\r\n        }\r\n\r\n        @Override\r\n        public void onFailure(String msg) {\r\n            System.out.println(msg);\r\n        }\r\n    };\r\n```\r\n\r\n# Pull Requests\r\nI welcome and encourage all pull requests. It usually will take me within 24-48 hours to respond to any issue or request. Here are some basic rules to follow to ensure timely addition of your request:\r\n  1. Match coding style (braces, spacing, etc.) This is best achieved using `CMD`+`Option`+`L` (Reformat code) on Mac (not sure for Windows) with Android Studio defaults.\r\n  2. If its a feature, bugfix, or anything please only change code to what you specify.\r\n  3. Please keep PR titles easy to read and descriptive of changes, this will make them easier to merge :)\r\n  4. Pull requests _must_ be made against `develop` branch. Any other branch (unless specified by the maintainers) will get rejected.\r\n  5. Check for existing [issues](https://github.com/nisrulz/optimushttp/issues) first, before filing an issue.  \r\n  6. Have fun!\r\n\r\n### Created & Maintained By\r\n[Nishant Srivastava](https://github.com/nisrulz) ([@nisrulz](https://www.twitter.com/nisrulz))\r\n\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright 2016 Nishant Srivastava\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}